
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightASSIGNPLUSASSIGNleftORleftANDleftEQNEleftGTLTGELEleftPLUSMINUSleftTIMESDIVIDErightNOTrightQUESTIONCOLONAND ASSIGN BOOL COLON DIVIDE EQ GE GT ID LE LPAREN LT MINUS NE NOT NUMBER OR PLUS PLUSASSIGN QUESTION RPAREN TIMESstatement : expressionstatement : ID ASSIGN expression\n                 | ID PLUSASSIGN expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression GT expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression LE expression\n                  | expression EQ expression\n                  | expression NE expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : expression QUESTION expression COLON expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : BOOLexpression : ID'
    
_lr_action_items = {'ID':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[3,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NOT':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'LPAREN':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'NUMBER':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'BOOL':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,6,7,23,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,],[0,-1,-21,-19,-20,-16,-21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-2,-3,-18,-17,]),'PLUS':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[8,-21,-19,-20,-16,-21,8,-4,-5,-6,-7,8,8,8,8,8,8,8,8,8,8,8,-18,-17,]),'MINUS':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[9,-21,-19,-20,-16,-21,9,-4,-5,-6,-7,9,9,9,9,9,9,9,9,9,9,9,-18,-17,]),'TIMES':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[10,-21,-19,-20,-16,-21,10,10,10,-6,-7,10,10,10,10,10,10,10,10,10,10,10,-18,-17,]),'DIVIDE':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[11,-21,-19,-20,-16,-21,11,11,11,-6,-7,11,11,11,11,11,11,11,11,11,11,11,-18,-17,]),'GT':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[12,-21,-19,-20,-16,-21,12,-4,-5,-6,-7,-8,-9,-10,-11,12,12,12,12,12,12,12,-18,-17,]),'LT':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[13,-21,-19,-20,-16,-21,13,-4,-5,-6,-7,-8,-9,-10,-11,13,13,13,13,13,13,13,-18,-17,]),'GE':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[14,-21,-19,-20,-16,-21,14,-4,-5,-6,-7,-8,-9,-10,-11,14,14,14,14,14,14,14,-18,-17,]),'LE':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[15,-21,-19,-20,-16,-21,15,-4,-5,-6,-7,-8,-9,-10,-11,15,15,15,15,15,15,15,-18,-17,]),'EQ':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[16,-21,-19,-20,-16,-21,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,16,16,16,16,16,-18,-17,]),'NE':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[17,-21,-19,-20,-16,-21,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,17,17,17,17,17,-18,-17,]),'AND':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[18,-21,-19,-20,-16,-21,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,18,18,18,18,-18,-17,]),'OR':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[19,-21,-19,-20,-16,-21,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,19,19,19,-18,-17,]),'QUESTION':([2,3,6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,43,],[20,-21,-19,-20,20,-21,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-18,20,]),'ASSIGN':([3,],[21,]),'PLUSASSIGN':([3,],[22,]),'RPAREN':([6,7,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,41,43,],[-19,-20,-16,-21,41,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-18,-17,]),'COLON':([6,7,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,41,43,],[-19,-20,-16,-21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,42,-18,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,42,],[2,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement_expr','evaluator.py',77),
  ('statement -> ID ASSIGN expression','statement',3,'p_statement_assign','evaluator.py',81),
  ('statement -> ID PLUSASSIGN expression','statement',3,'p_statement_assign','evaluator.py',82),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','evaluator.py',91),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','evaluator.py',92),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','evaluator.py',93),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','evaluator.py',94),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','evaluator.py',95),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','evaluator.py',96),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','evaluator.py',97),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','evaluator.py',98),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','evaluator.py',99),
  ('expression -> expression NE expression','expression',3,'p_expression_binop','evaluator.py',100),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','evaluator.py',101),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','evaluator.py',102),
  ('expression -> NOT expression','expression',2,'p_expression_not','evaluator.py',131),
  ('expression -> expression QUESTION expression COLON expression','expression',5,'p_expression_ternary','evaluator.py',135),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','evaluator.py',139),
  ('expression -> NUMBER','expression',1,'p_expression_number','evaluator.py',143),
  ('expression -> BOOL','expression',1,'p_expression_bool','evaluator.py',147),
  ('expression -> ID','expression',1,'p_expression_id','evaluator.py',151),
]
